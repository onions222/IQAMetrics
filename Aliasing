import numpy as np
import cv2
from scipy.fftpack import fft2, fftshift
from skimage.util import img_as_float
import matplotlib.pyplot as plt

def adaptive_thresholds(image):
    """Compute adaptive thresholds for Canny based on image contrast."""
    median_intensity = np.median(image)
    lower_threshold = max(0, (1.0 - 0.33) * median_intensity)
    upper_threshold = min(255, (1.0 + 0.33) * median_intensity)
    return lower_threshold, upper_threshold

def adaptive_frequency_threshold(magnitude_spectrum):
    """Compute adaptive thresholds based on frequency domain statistics."""
    mean_magnitude = np.mean(magnitude_spectrum)
    std_magnitude = np.std(magnitude_spectrum)
    
    # Adaptive threshold based on the statistics of the magnitude spectrum
    high_freq_threshold = mean_magnitude + 2 * std_magnitude
    return high_freq_threshold

def detect_aliasing_advanced(image_path):
    # Read the image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if image is None:
        raise ValueError(f"Image not found: {image_path}")
    
    # Convert image to float for precision
    image_float = img_as_float(image)
    
    # Compute the 2D Fourier Transform of the image
    f_transform = fft2(image_float)
    f_transform_shifted = fftshift(f_transform)
    
    # Get the magnitude spectrum
    magnitude_spectrum = np.abs(f_transform_shifted)
    
    # Compute adaptive threshold based on frequency domain
    high_freq_threshold = adaptive_frequency_threshold(magnitude_spectrum)
    
    # Normalize the magnitude spectrum
    normalized_magnitude_spectrum = magnitude_spectrum / np.max(magnitude_spectrum)
    
    # Adaptive thresholds for Canny edge detection
    lower_threshold, upper_threshold = adaptive_thresholds(image_float * 255)
    
    # Edge detection using Canny filter with adaptive thresholds
    edges = cv2.Canny((image_float * 255).astype(np.uint8), lower_threshold, upper_threshold)
    
    # Analyze high-frequency content around edges
    aliased_regions = np.zeros_like(image_float)
    high_freq_regions = normalized_magnitude_spectrum > high_freq_threshold
    aliased_regions[edges > 0] = high_freq_regions[edges > 0]
    
    # Count potential aliasing artifacts
    potential_aliasing = np.sum(aliased_regions)
    
    # Subsampling analysis
    subsampled_image = cv2.resize(image_float, (image_float.shape[1]//2, image_float.shape[0]//2), interpolation=cv2.INTER_LINEAR)
    subsampled_image_resized = cv2.resize(subsampled_image, (image_float.shape[1], image_float.shape[0]), interpolation=cv2.INTER_LINEAR)
    
    diff_image = np.abs(image_float - subsampled_image_resized)
    subsample_artifacts = np.sum(diff_image > high_freq_threshold)
    
    # Determine if aliasing is present based on analysis
    if potential_aliasing > 0.02 * image_float.size and subsample_artifacts > 0.01 * image_float.size:
        return True, normalized_magnitude_spectrum, edges, aliased_regions
    else:
        return False, normalized_magnitude_spectrum, edges, aliased_regions

# Example usage
image_path = 'your_image.jpg'
is_aliased, spectrum, edges, aliased_regions = detect_aliasing_advanced(image_path)

if is_aliased:
    print("The image has aliasing.")
else:
    print("The image does not have aliasing.")

# Visualize the results
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
plt.imshow(np.log1p(spectrum), cmap='gray')
plt.title('Magnitude Spectrum')
plt.subplot(1, 3, 2)
plt.imshow(edges, cmap='gray')
plt.title('Detected Edges')
plt.subplot(1, 3, 3)
plt.imshow(aliased_regions, cmap='hot')
plt.title('Potential Aliased Regions')
plt.show()
